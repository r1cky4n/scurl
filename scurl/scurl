#!/usr/bin/python

#=======================================================================================================================
#
# CS255 Project 2 - SCURL
#
# Authors:   Rick Yan <my259@stanford.edu>
#            Jonathan Griffin <jgriffi2@stanford.edu>
#
#=======================================================================================================================

#=======================================================================================================================
# IMPORTS
#=======================================================================================================================
import OpenSSL
from OpenSSL import SSL
from OpenSSL import crypto

from urlparse import urlparse
import socket
import argparse
import sys
import time
from time import gmtime, strftime
import re
import datetime

#=======================================================================================================================
# Defines
#=======================================================================================================================

# global variable so the _stale_cert_check handler can have a proper reference
#
staleN = -1

# global hostname reference
#
host = ""

# global revocation serial ids
#
revoke_serial = []

#=======================================================================================================================
# Parse Input Arguments and format properly
#=======================================================================================================================


# Checks url for correctness
#
# Input URL from user can be either in number-and-dots notation, or text notation, this function should convert
# URL to number-and-dots notation to be properly used.
#
# URL input is a string
#
# Additional Checks for Correctness
#   reject URLS without https scheme
#   reject invalid addresses
#
def _check_and_format_url( url ):

    # URL Parse to get Schema, hostname, port
    #
    o = urlparse(url)

    # Scheme Check - must be HTTPS
    #
    if o.scheme != 'https':
        sys.stderr.write("Invalid URL, not HTTPS Scheme, exiting...\n")
        exit(1)
        
    # check if address is proper 
    #
    ip_addr = ""
    try:
        ip_addr = socket.gethostbyname(o.hostname)
    except socket.error:
        sys.stderr.write("Invalid URL, address not proper, exiting...\n")
        exit(1)

    # assign port if defined, default to 443 (HTTPS Port)
    #
    ip_port = 443;
    try:
        if o.port != None:
            ip_port = o.port
    except ValueError:
        sys.stderr.write("Invalid URL, port not proper, exiting...\n")
        exit(1)

    # assign path if defined
    #
    ip_path = "/"
    if o.path != "":
        ip_path = o.path

    # output plaintext addr
    #
    host_pt = o.hostname

    return (ip_addr, ip_port, ip_path, host_pt)


# Choose protocol, should just be prot input, otherwise default to tls 1.2
#
def _choose_protocol( args ):
    if args.prot == 0:
        return SSL.TLSv1_METHOD
    elif args.prot == 1:
        return SSL.TLSv1_1_METHOD
    elif args.prot == 2:
        return SSL.TLSv1_2_METHOD
    elif args.prot == 3:
        return SSL.SSLv3_METHOD
    else:
        return SSL.TLSv1_2_METHOD 


# load crl.pem file, output x509 representation
# stores crl serial numbers into a list revoke_serial to be queried in the verification handler
#
def _load_crl( crlfile ):
    if crlfile == None:
        return None

    crl_pem = ""
    try: 
        with open(crlfile, 'r') as _crl_file:
            crl_pem = "".join(_crl_file.readlines()) 
    except:
        sys.stderr.write("CRLFILE OPEN failed:\n")
        exit(1)
        #return None

    try:
        crl_object = OpenSSL.crypto.load_crl(OpenSSL.crypto.FILETYPE_PEM, crl_pem)
    except Exception as e:
        sys.stderr.write("CRLFILE Parse failed: "+str(e)+"\n")
        exit(1)
        #return None

    revoked_objects = crl_object.get_revoked()
    for rvk in revoked_objects:
        #print "Serial:", rvk.get_serial()
        revoke_serial.append(rvk.get_serial())

    return crl_object

#=======================================================================================================================
# Create SSL Context and Connection
#=======================================================================================================================

# Sets up Context, Returns Context
# 
# use cacert, ciphers, and pcert information to set up context information
#
def _get_context( protocol, cacert, ciphers, pcert ):
    context = SSL.Context(protocol)

    # Add list of trusted CAs
    #
    if cacert != None:
        try:
            context.load_verify_locations(cacert, None)
        except Exception as e:
            sys.stderr.write("Add CACERT failed: "+str(e)+"\n")
            exit(1)
    else:
        # use default platform certificates
        #
        context.set_default_verify_paths()
        #context.load_verify_locations('/etc/ssl/certs/ca-certificates.crt', None)
        #context.load_verify_locations('/etc/ssl/cert.pem', None)

    # Add list of Ciphers
    #
    if ciphers != None:
        try:
            context.set_cipher_list( ciphers )
        except Exception as e:
            sys.stderr.write("Add CIPHERS failed: "+str(e)+"\n")
            exit(1)
    
    # if pinned certificate is set, set to VERIFY_NONE to ignore the verify handler's results. Cert check will be
    # done manually by _check_cert
    #
    ver_mode = SSL.VERIFY_PEER
    if pcert != None:
        ver_mode = SSL.VERIFY_NONE

    # Additional Options
    #
    context.set_options(SSL.OP_NO_SSLv2) # Don't accept SSLv2

    # VERIFY_NONE - When the SSL_CTX object is being used in client mode, any certificate received from the server will 
    #               be verified, but failure will not terminate the handshake.   
    # 
    # VERIFY_PEER - When the SSL_CTX object is being used in client mode, if the server sends a certificate, it will be 
    #               verified. If the verification fails, the handshake will be terminated immediately. The only time that 
    #               a server would not send a certificate is when an anonymous cipher is in use. Anonymous ciphers are 
    #               disabled by default. Any other flags combined with this one in client mode are ignored.
    #
    # We are using context in client mode
    #
    context.set_verify(ver_mode, _verify)

    return context


# Sets up SSL Connection, Does Handshake, Returns SSL Socket
#
def _ssl_connect( context, ip_addr, port, host ):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ssl_sock = SSL.Connection(context, sock)

    try:
        ssl_sock.connect((ip_addr, port))  # 443 is default https port
        ssl_sock.set_tlsext_host_name(host)
        ssl_sock.do_handshake()
    except Exception as e:
        sys.stderr.write("SSL Connection/do_handshake failed: "+str(e)+"\n")
        exit(1)
    
    return ssl_sock

# Close the SSL Socket
#
def _ssl_close( ssl_sock ):
    ssl_sock.close()

# Get the Certificate from the Connected Server
#   Manual Check for Pinned Certificate
#
def _pin_check_cert( ssl_sock, pcert ):
    cert = ssl_sock.get_peer_certificate()
    common_name = cert.get_subject().commonName.decode()

    # Pinned Certificate not set, pass
    #
    if pcert == None:
        return True
    
    pcert_pem = ""
    try: 
        with open(pcert, 'r') as _pcert_file:
            pcert_pem = "".join(_pcert_file.readlines()) 
    except:
        sys.stderr.write("PCERT OPEN failed:\n")
        exit(1)
    
    try:
        pcert_obj = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, pcert_pem)
    except Exception as e:
        sys.stderr.write("PCERT Parse failed: "+str(e)+"\n")
        exit(1)

    # Verbose output of certificates - for DEBUG ONLY
    #
    #_pyopenssl_cert_or_req_san(pcert_obj)
    #print "-----------------------------"
    #print "-----------------------------"
    #_pyopenssl_cert_or_req_san(cert)

    # SHA256 HASH of the certificates
    #
    p_digest = pcert_obj.digest("sha256")
    digest   = cert.digest("sha256")

    #print p_digest
    #print digest

    if p_digest != digest:
        sys.stderr.write("Pinned Certificate Check Failed!\n")
        exit(1)

    # pinned certificate passed
    #
    return True

#=======================================================================================================================
# Certificate Verification Function
#=======================================================================================================================

# wildcard check on Server's Certificate to insure Subject Alternative Name is proper
#
def _check_san_wc( cn, host ):
    scn     = str(cn)

    # compare scn with host, if full match, pass
    # 
    if scn == host:
        return True

    # if does not contain *, pass
    #
    #if '*' not in scn:
    #    return True

    # break down name, do WC check
    #
    dot     = re.compile('\.')
    host_pt = dot.split(host, 1)
    cn_pt   = dot.split(scn, 1)

    rxString = cn_pt[0].replace("*",".+")
    regex    = re.compile(rxString)

    matches = (regex.match(host_pt[0]) and (host_pt[1]==cn_pt[1])) or ((cn_pt[0]=="*") and (host==cn_pt[1]))

    #print host_pt
    #print scn
    #print cn_pt
    #print rxString
    #print "Matches: "+ str(matches)    

    if matches:
        return True
    else:
        return False

# supplemental certificate parsing function for debug 
# 
def _pyopenssl_cert_or_req_san(cert_or_req):
    """Get Subject Alternative Names from certificate or CSR using pyOpenSSL.
    .. todo:: Implement directly in PyOpenSSL!
    .. note:: Although this is `acme` internal API, it is used by
        `letsencrypt`.
    :param cert_or_req: Certificate or CSR.
    :type cert_or_req: `OpenSSL.crypto.X509` or `OpenSSL.crypto.X509Req`.
    :returns: A list of Subject Alternative Names.
    :rtype: `list` of `unicode`
    """
    # This function finds SANs by dumping the certificate/CSR to text and
    # searching for "X509v3 Subject Alternative Name" in the text. This method
    # is used to support PyOpenSSL version 0.13 where the
    # `_subjectAltNameString` and `get_extensions` methods are not available
    # for CSRs.

    # constants based on PyOpenSSL certificate/CSR text dump
    part_separator = ":"
    parts_separator = ", "
    prefix = "DNS" + part_separator

    if isinstance(cert_or_req, OpenSSL.crypto.X509):
        func = OpenSSL.crypto.dump_certificate
    else:
        func = OpenSSL.crypto.dump_certificate_request
    text = func(OpenSSL.crypto.FILETYPE_TEXT, cert_or_req).decode("utf-8")
    # WARNING: this function does not support multiple SANs extensions.
    # Multiple X509v3 extensions of the same type is disallowed by RFC 5280.
    match = re.search(r"X509v3 Subject Alternative Name:\s*(.*)", text)
    
    # Printout
    print
    print text
    print

    # WARNING: this function assumes that no SAN can include
    # parts_separator, hence the split!
    sans_parts = [] if match is None else match.group(1).split(parts_separator)

    return [part.split(part_separator)[1]
            for part in sans_parts if part.startswith(prefix)]

# use UTC time
#
def _stale_cert_check( cert ):
    if staleN == -1: # allow-stale not set, check should fail
        return False

    expDate = cert.get_notAfter() 

    # Adjust the expiration time by +N days, check against current time
    #
    # issue with has_expired and the other time functions from pyopenssl - going to use hacky solution
    #
    dt      = datetime.datetime.strptime( expDate,"%Y%m%d%H%M%SZ")
    new_dt  = dt + datetime.timedelta(days=staleN) 
    new_exp = new_dt.strftime("%Y%m%d%H%M%SZ").encode()
    
    curDate = strftime("%Y%m%d%H%M%SZ", gmtime())
    cdt     = datetime.datetime.strptime( curDate,"%Y%m%d%H%M%SZ")

    # NOTE - This does not seem to update cert.has_expired()... don't rely on this
    #
    cert.set_notAfter(new_exp)

    #print "Before Modifications"
    #print expDate
    #print "DateTime"
    #print dt
    #print new_dt
    #print curDate
    #print cdt
    #print new_dt > cdt 

    # updated expiration time > current time? then cert is valid
    #
    if new_dt > cdt:
        return True
    else:
        return False


# Verify will immediately fail if any errno != 10 is encountered
#
# error 10 (Cert Expired) is allow_stale_certs is specified, and a range check will be performed 
#  
#
def _verify(conn, cert, errno, depth, result):
    #print
    #print errno
    #print depth
    #print result
    #print "-------------------------------"
    #print cert.get_subject().get_components()
    #extcount = cert.get_extension_count()
    #print extcount
    #if depth==0:
    #    for i in range(0,extcount):
    #        ext = cert.get_extension(i)
    #        print ext.get_short_name()
    #        print ext.get_short_name() == 'subjectAltName'
    #        print ext.__str__()
    #print
    #san = _pyopenssl_cert_or_req_san(cert)
    #print san
    #if depth==0:
    #    _stale_cert_check(cert)

    # If error 10 (Cert Expired) - let stale_cert_check qualify again
    #
    if errno == 10:
        return _stale_cert_check( cert )

    # all other errors will cause failure
    #
    if errno != 0:
        return False

    # check serial number against revocation list
    # need to convert serial number to a hex string
    #
    serial   = cert.get_serial_number();
    serial_H = hex(serial)    
    serial_H = re.sub('0x','',serial_H)
    serial_H = serial_H.upper()
    serial_H = re.sub('L','',serial_H)

    if serial_H in revoke_serial:
        #print "REVOKED!!!"
        return False

    # if depth==0 (server's certificate), also do the wildcard certificate check
    # First check common name, then check SAN
    #
    if depth == 0:
        # check common_name first
        #
        host_match = False
        common_name = cert.get_subject().commonName.decode()
        host_match = host_match or _check_san_wc( common_name, host )

        # Iterate through extensions and find subjectAltName
        # parse the DNS information for SAN info
        #
        for i in range(0,cert.get_extension_count()):
            ext = cert.get_extension(i)
            if ext.get_short_name() == 'subjectAltName':
                sep      = re.compile(', ')
                san_list = sep.split(ext.__str__())
                for san in san_list:
                    san = re.sub('DNS:','',san)
                    host_match = host_match or _check_san_wc( san, host )
                    #print san
                    #print host_match
        
        return host_match

    # Everything Passed!
    #
    return True


#=======================================================================================================================
# HTTP GET Request
#=======================================================================================================================

# Continuously call receive until all the data is parsed
#
def recv_with_timeout(ssl_sock,timeout=2):
    # make socket non blocking
    # 
    ssl_sock.setblocking(0)
     
    # total data partwise in an array
    #
    total_data = []
    data=''
     
    # beginning time
    begin = time.time()
    while True:
        # if you got some data, then break after timeout
        #
        if total_data and ((time.time()-begin) > timeout):
            break
         
        # if you got no data at all, wait a little longer, twice the timeout
        #
        elif (time.time()-begin) > timeout*2:
            break
         
        # recv something
        #
        try:
            data = ssl_sock.recv(8192)
            if data:
                total_data.append(data)
                
                # change the beginning time for measurement
                #
                begin=time.time()
            else:
                # sleep for some time to indicate a gap
                #
                time.sleep(0.1)
        except:
            pass
    # join all parts to make final string
    #
    return ''.join(total_data)


# Format the HTTP GET Request through SSL.CONNECTION, write to stdout
#
def _get_data( ssl_sock, host, path ):

    # FIXME - proper GET Command - doublecheck this
    #
    http_get  = 'GET '+path+' HTTP/1.1\r\n'
    http_host = 'HOST: '+host+'\r\n'
    http_user = 'User-Agent: curl/7.53.1\r\n'
    http_acc  = 'Accept: */*\r\n'
    http_conn = 'Connection: close\r\n'
    http_req  = http_get+http_host+http_user+http_acc+http_conn+'\r\n'

    ssl_sock.send(http_req)
    full_data = recv_with_timeout( ssl_sock )

    # remove the HTTP Header
    #
    hdrend = re.compile(r'\r\n\r\n')
    data   = hdrend.split(full_data, 1)
   
    # Write Out HTTP GET Results
    #
    sys.stdout.write(data[1])

    #print http_req
    #print "-----"
    #print data[0]

    return data[1]

#=======================================================================================================================
# Main and Argument Parse
#=======================================================================================================================

# Used to create single line argparse error outputs
#
class ArgumentParserError(Exception): pass

class ThrowingArgumentParser(argparse.ArgumentParser):
    def error(self, message):
        raise ArgumentParserError(message)

def main():
    descr = 'Secure CURL implementation for CS 255 Project 2: Rick Yan <my259@stanford.edu>,  Jonathan Griffin <jgriffi2@stanford.edu>'
    #parser = argparse.ArgumentParser(description=descr)
    parser = ThrowingArgumentParser(description=descr)

    # ARGUMENTS
    # 
    # Note - url is setup as a list, but we only need to worry about a single 
    #
    parser.add_argument('--tlsv1.0',           action="store_const", dest="prot", const=0, help='Use TLSv1.0 (SSL)')
    parser.add_argument('--tlsv1.1',           action="store_const", dest="prot", const=1, help='Use TLSv1.1 (SSL)')
    parser.add_argument('--tlsv1.2',           action="store_const", dest="prot", const=2, help='Use TLSv1.2 (SSL)')
    parser.add_argument('--sslv3', '-3',       action="store_const", dest="prot", const=3, help='Use SSLv3 (SSL)')
    parser.add_argument('--ciphers',           help='SSL ciphers to use (SSL)')
    parser.add_argument('--crlfile',           help='Get a CRL list in PEM format from the given file')
    parser.add_argument('--cacert',            help='CA certificate to verify peer against (SSL)')
    parser.add_argument('--allow-stale-certs', type=int, dest="staleN",  help='Allow stale certificate less than N days old to be used')
    parser.add_argument('--pinnedcertificate', help='Only send data to authenticated server, overrides --cacert and --crlfile')
    parser.add_argument('url',                 nargs="*", help='URL target')


    try:
        args = parser.parse_args()
    except:
        sys.stderr.write("use ./scurl --help for more information\n")
        exit(1)

    if (len(args.url) == 0):
        sys.stderr.write("Please Input a URL, use ./scurl --help for more information\n")
        exit(1)

    #==============================================================
    # Initial parse of the input data
    #==============================================================

    global host
    global staleN

    protocol                = _choose_protocol( args )
    (addr,port,path,host)   = _check_and_format_url( args.url[0] )
    crl                     = _load_crl(args.crlfile)
    cacert                  = args.cacert 
    ciphers                 = args.ciphers    
    pcert                   = args.pinnedcertificate

    # allow-stale-certs check - must be integer input
    # 
    if args.staleN != None:
        if args.staleN >= 0:
            staleN = args.staleN
        else:
            sys.stderr.write("--allow-stale-certs accepts a positive integer value only...\n")
            exit(1)

    #==============================================================
    # Set up SSL Connection and perform HTTP GET
    #==============================================================
    
    ctx         = _get_context( protocol, cacert, ciphers, pcert )
    ssl_sock    = _ssl_connect( ctx, addr, port, host )
    pin_pass    = _pin_check_cert( ssl_sock, pcert )
    data        = _get_data( ssl_sock, host, path )
    _ssl_close(ssl_sock)



if __name__ == '__main__':
    main()




